####################################################################
# Inspection of assembler code and debugging of example
# do_getpid32.c
# do_getpid64.c
#
# Learn
#   - to do a syscall directly via assembler code
#   - that doing so may crash your system if your program is wrong or you
#     on the wrong machine (32/64)
#
# 01.04.12 : FABR
# Force static linking of libc
# Otherwise the code for the library function is not included in the binary.
#
# 21.03.13 : FABR
# Update for Linux Mint and kernel 3.5

###############################################################
# build

make clean; make

#--------------------------------------------------------------
# On a 32 bit machine
#--------------------------------------------------------------

############################################################
# debug and disassemble
# ATTENTION: do not run bin/do_getpid32 on a 64bit machine!!

gdb -tui bin/do_getpid32

(gdb) break main
(gdb) break 27
(gdb) break 30
(gdb) run 
(gdb) layout asm

0x8048ef1 <main+17>     mov    $0x14,%eax 
0x8048ef6 <main+22>     int    $0x80     
0x8048ef8 <main+24>     mov    %eax,0x80f112c

(gdb) stepi
	now watch the execution of single machine instructions
	until you reach the code after the syscall

0x8048ef8 <main+24>     mov    %eax,0x80f112c

Inspect contents of register eax:

(gdb) p $eax
$3 = 1536

(gdb) cont
(gdb) cont
Continuing.
Via assembler code: pid is 1536

0x8048f15 <main+53>     call   0x8053a70 <getpid>
0x8048f1f <main+63>     sub    $0x8,%esp 

(gdb) stepi  (several times)

0x8053a92 <getpid+34>           mov    $0x14,%eax  
0x8053a97 <getpid+39>           call   *0x80ef5a4 

#----- ASIDE
The 'call   *0x80ef5a4' is a wrapper for syscall entry.
At boot time the kernel detects the fasted available method to enter
the kernel. Its decision is wrapped into function kernel_vsyscall.

It's part of the new VDSO technique used to speed up syscall.
Learn more about ist at
  http://www.trilithium.com/johan/2005/08/linux-gate/

Step into the call with stepi

0x110414 <__kernel_vsyscall>    int    $0x80  
0x110416 <__kernel_vsyscall+2>  ret     

Apperantly, our system does still use the int 0x80 and not the
sysenter instruction.
#----- END ASIDE

After the syscall (int 0x80) inspect contents of register eax:

(gdb) p $eax
$2 = 1536

Quit demo here

Switch off tui mode via 'Ctrl-x a'. Then quit.
Otherwise you may get an error report like this:
'Assertion `gdbarch != NULL'
Ignore error and do not opt for writing a core file.
Just quit via 'Ctrl-d'
